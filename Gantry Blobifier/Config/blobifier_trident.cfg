##########################################################################################

# Sample config to be used in conjunction with Gantry Blobifier mod 
# Created by Kodi Summers (ksummers92 on Discord). The Macro is based on the Blobifier macro
# with some variations to accommodate the difference with the hardware used in this variant.

# The goals of this combination of devices is to dispose of purged filament during a 
# multicolored print without the need of a purge block and without the flurries of
# filament poops consuming your entire 3D printer room. The Blobifier achieves that by
# purging onto a retractable tray which causes the filament to turn into a tiny blob 
# rather then a large spiral. This keeps the waste relatively small. 

# It is advised to use the start_gcode from Happy Hare. Then you will be able to fully 
# and efficiently use this mod. Check the Happy Hare document at gcode_preprocessing.md 
# in the Happy Hare github for more details.

###################################### DISCLAIMER ########################################

# You, and you alone, are responsible for the correct execution of these macros and 
# gcodes. Any damage that may occur to your machine remains your responsibility. 
# Especially when executing this macro for the first few times, keep an eye on your 
# printer and the 
# emergency stop.

##########################################################################################

##########################################################################################
# Main macro. Usually you should only need to call this one or place it in the Happy Hare
# _MMU_POST_LOAD macro using the variable_user_post_load_extension:
#
# variable_user_post_load_extension : `BLOBIFIER`
#
# Notes on parameters:
# PURGE_LENGTH=[float] (optional) The length to purge. If omitted (default) it will check
#                      the purge_volumes matrix or variable_purge_length. This can be used
#                      to override and for testing.
#
[gcode_macro BLOBIFIER]
# These parameters define your filament purging.
# Note that the control of retraction is set in 'mmu_macro_vars.cfg' which can be increased
# if you experience excessive oozing.
variable_purge_spd: 400                 # Speed, in mm/min, of the purge.
variable_purge_temp_min: 200            # Minimum nozzle purge temperature.
variable_toolhead_x: 55                 # From the nozzle to the left of your toolhead
variable_toolhead_y: 45                 # From the nozzle to the front of your toolhead



# These parameters define your scrubbing, travel speeds, safe z clearance and how many
# times you want to wipe. Update as necessary.
variable_clearance_z:           2          # When traveling, but not cleaning, the
                                           #   clearance along the z-axis between nozzle
                                           #   and brush.
variable_travel_spd_xy:     10000          # Travel (not cleaning) speed along x and
                                           #   y-axis in mm/min.
variable_blob_kick_spd:     5000         # Speed to kick blob off 
variable_travel_spd_z:       100          # Travel (not cleaning) speed along z axis
                                           #   in mm/min.

variable_wipe_qty:              2          # Number of complete (A complete wipe: left,
                                           #   right, left OR right, left, right) wipes.
variable_wipe_spd_xy: 10000          # Nozzle wipe speed in mm/min.

# The acceleration to use when using the brush action. If set to 0, it uses the already 
# set acceleration. However, in some cases this is not desirable for the last motion 
# could be an 'outer contour' acceleration which is usually lower.
variable_brush_accel: 0

# These parameters define the size of the brush. Update as necessary. A visual reference
# is provided below.
#
#                  ←   brush_width   →
#                   _________________
#                  |                 |  ↑                Y position is acquired from your
#  brush_start (x) |                 | brush_depth       stepper_y position_max. Adjust
#                  |_________________|  ↓                your brush physically in Y so
#                          (y)                           that the nozzle scrubs within the
#                      brush_front                       brush.
# __________________________________________________________
#                     PRINTER FRONT
#
#
# Start location of the brush. Defaults for 250, 300 and 350mm are provided below.
# Uncomment as necessary
#variable_brush_start:          34  # For 250mm build
variable_brush_start:           90  # For 300mm build
#variable_brush_start:          84  # for 350mm build

# width of the brush
variable_brush_width: 20

# Blobifier sends the toolhead to the maximum y position during purge operations and
# minimum x position during shake operations. This can cause issues when skew correction 
# is set up. If you have skew correction enabled and get 'move out of range' errors 
# regarding blobifier while skew is enabled, try increasing this value. Keep the 
# adjustments small though! (0.1mm - 0.5mm) and increase it until it works.
variable_skew_correction: 0.1

# Location of where to purge. The tray is 15mm in length, so if you assemble it against 
# the side of the bed (default), 10mm is a good location
variable_purge_x: 271.5
variable_purge_y: 350
variable_kick_x:  261
variable_kick_y: 315
variable_kick_ready_x: 311
variable_yield_y: 295

# ========================================================================================
# ==================== BLOB TUNING =======================================================
# ========================================================================================

# The following section defines how the purging sequence is executed. This is where you 
# tune the purging to create pretty blobs. Refer to the visual reference for a better 
# understanding. The visual is populated with example values. Below are some guides 
# provided to help with tuning.
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < End of third iteration.
#                                / \                                  HEIGHT:   3 x iteration_z_raise - (2 + 1) x iteration_z_change  (3 x 5 - 2 x 1.2 = 11.4)
#                               |   |                                 EXTRUDED: 3 x max_iteration_length                              (3 x 50 = 150)
#                              /     \          ______________  < End of second iteration.
#                             |       \                               HEIGHT:   2 x iteration_z_raise - 1 x iteration_z_change        (2 x 5 - 1 x 1.2 = 8.8)
#                            /         |                              EXTRUDED: 2 x max_iteration_length                              (2 x 50 = 100)
#                           |           \       ______________  < End of first iteration. 
#                          /             \                            HEIGHT:   1 x iteration_z_raise                                 (1 x 5 = 5)
#                         |               |                           EXTRUDED: 1 x max_iteration_length                              (1 x 50 = 50)
#___________               \             /      ______________  < Start height of the nozzle. default value: 1.5mm
#           |_______________\___________/_      ______________  < Bottom of the tray
#           |_____________________________|
#           |
# 
########################### BLOB TUNING ##############################
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. purge start          |
# |    initial purge (first few mm)     |                            |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under     | Incr. temperature          |
# |  the nozzle at the first iteration  | Decr. z_raise              |
# |                                     | Incr. purge_length_maximum |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under the | Decr. purge_spd            |
# |  the nozzle at later iterations     | Decr. z_raise_exp          |
# |                                     | Decr. z_raise              |
# |                                     | Incr. purge_length_maximum |
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. z_raise_exp          |
# |         later iterations            |     (Not above 1)          |
# +-------------------------------------+----------------------------+
#

# The height to raise the nozzle above the tray before purging. This allows any built up 
# pressure to escape before the purge.
variable_purge_start: 0.4

# The amount to raise Z
variable_z_raise: 17

# As the nozzle gets higher and the blob wider, the Z raise needs to be reduced, this
# follows the following formula: 
#            (extruded_amount/max_purge_length)^z_raise_exp * z_raise
# 1 is linear, below 1 will cause z to raise less quickly over time, above 1 will make it
# raise quicker over time. 0.85 is a good starting point and you should not have it above 1
variable_z_raise_exp: 0.95

# Lift the nozzle slightly after creating the blob te release pressure on the tray.
variable_eject_hop: 4.0

# Dwell time (ms) after purging and before cleaning to relieve pressure from the nozzle.
variable_pressure_release_time: 6000

# Set the part cooling fan speed. Disabling can help prevent the nozzle from cooling down 
# and stimulate flow, Enabling it can prevent blobs from sticking together. Values range 
# from 0 .. 1, or -1 if you don't want it changed.
#variable_part_cooling_fan: -1              # Leave it unchanged
#variable_part_cooling_fan:  0.2              # Disable the fan
variable_part_cooling_fan:  1               # Run it at full speed

# Define the part fan name if you are using a fan other than [fan]
# Applies to [fan_generic] or other fan definitons
# Example would be if you are using auxiliary fan control in Orcaslicer (https://github.com/SoftFever/OrcaSlicer/wiki/Auxiliary-fan)
# If you are unsure if you need this, then probably just leave it commented out.

#variable_fan_name: "fan_generic fan0"

# Set a blob cooling time after completion of a blob
# Increase if blob is sticking to tray or otherwise not cleanly being "kicked"
variable_blob_cooling_time: 1000


# ========================================================================================
# ==================== PURGE LENGTH TUNING ===============================================
# ========================================================================================

# The absolute minimum to purge, even if you don't changed tools. This is to prime the 
# nozzle before printing
variable_purge_length_minimum: 150

# The maximum amount of filament (in mm¹) to purge in a single blob. Blobifier will 
# automatically purge multiple blobs if the purge amount exceeds this.
variable_purge_length_maximum: 400

# Default purge length to fall back on when neither the tool map purge_volumes or 
# parameter PURGE_LENGTH is set.
variable_purge_length: 150

# The slicer values often are a bit too wasteful. Tune it here to get optimal values. 
# 0.6 (60%) is a good starting point.
variable_purge_length_modifier: 1.0

# Fixed length of filament to add after the purge volume calculation. Happy Hare already
# shares info on the extra amount of filament to purge based on known residual filament,
# tip cutting fragment and initial retraction setting. However this setting can add a fixed
# amount on top on that if necessary although it is recommended to start with 0 and tune
# slicer purge matrix first.
# When should you alter this value:
#   INCREASE: When the dark to light swaps are good, but light to dark aren't.
#   DECREASE: When the light to dark swaps are good, but dark to light aren't. Don't 
#     forget to increase the purge_length_modifier
variable_purge_length_addition: 0

gcode:

  # ======================================================================================
  # ==================== RECORD STATE (INCL. FANS, SPEEDS, ETC...) =======================
  # ======================================================================================

  # General state
  SAVE_GCODE_STATE NAME=BLOBIFIER_state

  
  # ======================================================================================
  # ==================== CHECK HOMING STATUS =============================================
  # ======================================================================================
  
  {% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND MSG="BLOBIFIER: Not homed! Home xyz before blobbing"
  {% elif printer.quad_gantry_level and printer.quad_gantry_level.applied == False %}
    RESPOND MSG="BLOBIFIER: QGL not applied! run quad_gantry_level before blobbing"
  {% else %}

    
    # Part cooling fan
    {% if part_cooling_fan >= 0 %}
      {% set fan = fan_name|string %}
      # Save the part cooling fan speed to be enabled again later
      {% set backup_fan_speed = (printer[fan].speed if printer[fan] is defined else printer.fan.speed) %}
      # Set part cooling fan speed
      M106 S{part_cooling_fan * 255}
    {% endif %}

    # Set feedrate to 100% for correct speed purging
    {% set backup_feedrate = printer.gcode_move.speed_factor %}
    M220 S100

    # ======================================================================================
    # ==================== DEFINE BASIC VARIABLES ==========================================
    # ======================================================================================
    
    {% set sequence_vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
    {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
    {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
    {% set from_tool = printer.mmu.last_tool %}
    {% set to_tool = printer.mmu.tool %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set pos_max = printer.toolhead.axis_maximum %}
    {% set position_y = pos_max.y - skew_correction %}
    {% set retraction = park_vars.retracted_length %}
    
    {% set vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set operation = params.OPERATION|default(printer.mmu.operation)|string|lower %}
    {% if operation in ['toolchange','load','unload'] %}
        {% set x, y, park_z_hop, z_hop_ramp, retract = vars.park_toolchange|default([-1,-1,0,0,0])|map('float') %}
    {% elif operation in ['runout'] %}
        {% set x, y, park_z_hop, z_hop_ramp, retract = vars.park_runout|default([-1,-1,0,0,0])|map('float') %}
    {% elif operation in ['pause'] %}
        {% set x, y, park_z_hop, z_hop_ramp, retract = vars.park_pause|default([-1,-1,0,0,0])|map('float') %}
    {% elif operation in ['cancel'] %}
        {% set x, y, park_z_hop, z_hop_ramp, retract = vars.park_cancel|default([-1,-1,0,0,0])|map('float') %}
    {% elif operation in ['complete'] %}
        {% set x, y, park_z_hop, z_hop_ramp, retract = vars.park_complete|default([-1,-1,0,0,0])|map('float') %}
    {% else %}
        {% set x = -1 %}
        {% set y = -1 %}
        {% set park_z_hop = 0 %}
        {% set z_hop_ramp = 0 %}
        {% set retract = 0 %}
    {% endif %}

    # Get purge volumes from the slicer (if set up right. see 
    # https://github.com/moggieuk/Happy-Hare/wiki/Gcode-Preprocessing)
    {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}
    
    # ======================================================================================
    # ==================== DETERMINE PURGE LENGTH ==========================================
    # ======================================================================================

    {% if params.PURGE_LENGTH %} # =============== PARAM PURGE LENGTH ======================
      {action_respond_info("BLOBIFIER: param PURGE_LENGTH provided")}
      {% set purge_len = params.PURGE_LENGTH|float %}
    {% elif from_tool == to_tool and to_tool >= 0 %} # ==== TOOL DIDN'T CHANGE =============
      {action_respond_info("BLOBIFIER: Tool didn't change (T%s > T%s), %s" % (from_tool, to_tool, "priming" if purge_length_minimum else "skipping"))}
      {% set purge_len = 0 %}

    {% elif pv %} # ============== FETCH FROM HAPPY HARE (LIKELY FROM SLICER) ==============
      {% if from_tool < 0 and to_tool >= 0%}
        {action_respond_info("BLOBIFIER: from tool unknown. Finding largest value for T? > T%d" % to_tool)}
        {% set purge_vol = pv|map(attribute=to_tool)|max %}
      {% elif to_tool < 0 %}
        {action_respond_info("BLOBIFIER: tool(s) unknown. Finding largest value")}
        {% set purge_vol = pv|map('max')|max %}
      {% else %}
        {% set purge_vol = pv[from_tool][to_tool]|float * purge_length_modifier %}
        {action_respond_info("BLOBIFIER: Swapped T%s > T%s" % (from_tool, to_tool))}
      {% endif %}
      {% set purge_len = purge_vol / filament_cross_section %}

      {% set purge_len = purge_len + printer.mmu.extruder_filament_remaining + park_vars.retracted_length + purge_length_addition %}

    {% else %} # ========================= USE CONFIG VARIABLE =============================
      {action_respond_info("BLOBIFIER: No toolmap or PURGE_LENGTH. Using default")}
      {% set purge_len = purge_length|float + printer.mmu.extruder_filament_remaining + park_vars.retracted_length %}
    {% endif %}

    # ==================================== APPLY PURGE MINIMUM =============================
    {% set purge_len = [purge_len,purge_length_minimum]|max|round(0, 'ceil')|int %}
    {action_respond_info("BLOBIFIER: Purging %dmm of filament" % (purge_len))}

    # ======================================================================================
    # ==================== PURGING SEQUENCE ================================================
    # ======================================================================================

    # Set to absolute positioning.
    G90

    # Check for purge length and purge if necessary.
    {% if purge_len|float > 0 %}

      # Make sure that MMU synced to extruder if configured that way
      # Helpful for when operating outside of print mainly
      {% if printer.mmu is defined and printer.mmu.enabled %}
         {% if printer.configfile.config.mmu.sync_to_extruder %}
           MMU_SYNC_GEAR_MOTOR SYNC=1
         {% else %}
           MMU_SERVO POS=up
         {% endif %}
      {% endif %} 

      # ====================================================================================
      # ==================== POSITIONING ===================================================
      # ====================================================================================

      # Move to the assembly, first move to correct X position (to the left of brush)
      # then move to y position that is better for how umbilical is mounted
      {% if printer.toolhead.position.y != purge_y %}
        BLOBIFIER_PARK
      {% endif %}

      # ====================================================================================
      # ==================== HEAT HOTEND ===================================================
      # ====================================================================================
      
      {% if printer.extruder.temperature < purge_temp_min %}
        {% if printer.extruder.target < purge_temp_min %}
          M109 S{purge_temp_min}
        {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}
        {% endif %}
      {% endif %}

      # ====================================================================================
      # ==================== START ITERATING ===============================================
      # ====================================================================================
      
      # Calculate total number of iterations based on the purge length and the max_iteration 
      # length.
      {% set blobs = (purge_len / purge_length_maximum)|round(0, 'ceil')|int %}
      {% set purge_per_blob = purge_len|float / blobs %}
      {% set retracts_per_blob = (purge_per_blob / 40)|round(0, 'ceil')|int %}
      {% set purge_per_retract = (purge_per_blob / retracts_per_blob)|int %}
      {% set pulses_per_retract = (purge_per_blob / retracts_per_blob / 5)|round(0, 'ceil')|int %}
      {% set pulses_per_blob = (purge_per_blob / 5)|round(0, 'ceil')|int %}
      {% set purge_per_pulse = purge_per_blob / pulses_per_blob %}
      {% set pulse_time_constant = purge_per_pulse * 0.95 / purge_spd / (purge_per_pulse * 0.95 / purge_spd + purge_per_pulse * 0.05 / 50) %}
      {% set pulse_duration = purge_per_pulse / purge_spd %}

      # Repeat the process until purge_len is reached
      {% for blob in range(blobs) %}
        RESPOND MSG={"'BLOBIFIER: Blob %d of %d (%.1fmm)'" % (blob + 1, blobs, purge_per_blob)}

        {% set pos_now = printer.gcode_move.gcode_position %}
        {% if pos_now.x != purge_x and pos_now.y != purge_y %}
          BLOBIFIER_PARK
        {% endif %}
        BLOBIFIER_MOVE MOVE={purge_start} SYNC=1

        # relative positioning
        G91 
        # relative extrusion
        M83

        # Purge filament in a pulsating motion to purge the filament quicker and better
        {% for pulse in range(pulses_per_blob) %}
          # Calculations to determine z-speed
          {% set purged_this_blob = pulse * purge_per_pulse %}
          {% set z_last_pos = purge_start + ((purged_this_blob)/purge_length_maximum)**z_raise_exp * z_raise %}
          {% set z_pos = purge_start + ((purged_this_blob + purge_per_pulse)/purge_length_maximum)**z_raise_exp * z_raise %}
          {% set z_up = z_pos - z_last_pos %}
          {% set speed = z_up / pulse_duration %}

          # Purge quickly
          BLOBIFIER_RESET
          MANUAL_STEPPER STEPPER=blobifier MOVE={z_up * pulse_time_constant} SPEED={speed} SYNC=0
          G1 E{purge_per_pulse * 0.95}
          # Purge a tiny bit slowly
          BLOBIFIER_RESET
          MANUAL_STEPPER STEPPER=blobifier MOVE={z_up * (1 - pulse_time_constant)} SPEED={speed} SYNC=0
          G1 E{purge_per_pulse * 0.05}

          # retract and unretract filament every now and then for thorough cleaning
          {% if pulse % pulses_per_retract == 0 and pulse > 0 %}
            G1 E-2 F1800
            G1 E2 F800
          {% endif %}
          
        {% endfor %}

        # Retract to match what Happy Hare is expecting
        # Check if park vars has a retraction length greater than 0, default is 0 in MMU_PARK so typically indicates that park operation not performed purging
        {% if retraction > 0 %}
          G1 E-{retraction} F{sequence_vars.retract_speed * 60}
          RESPOND MSG={"'Park Vars Retraction: %.1fmm'" % (retraction)}
          RESPOND MSG={"'Park Operation: %s'" % (operation)}
        # If park vars retraction is 0 (or less?), then use the retract value set in _MMU_SEQUENCE_VARS
        {% else %}
          G1 E-{retract} F{sequence_vars.retract_speed * 60}
          RESPOND MSG={"'Sequence Vars Retraction: %.1fmm'" % (retract)}
          RESPOND MSG={"'Park Operation: %s'" % (operation)}
        {% endif %}
        
        # ==================================================================================
        # ==================== DEPOSIT BLOB ================================================
        # ==================================================================================

        BLOBIFIER_RESET
        MANUAL_STEPPER STEPPER=blobifier MOVE={eject_hop}
        # Hold position over blob for a period of time to assist cooling blob
        {% if blob_cooling_time > 0 %}
            G4 P{blob_cooling_time}
        {% endif %}

        G90
        G1 X{kick_ready_x} Y{kick_y} F{travel_spd_xy}
        BLOBIFIER_HOME        
        G1 X{kick_x} F{blob_kick_spd}
      {% endfor %}
    {% endif %}
    G4 P{pressure_release_time}

    BLOBIFIER_CLEAN

    # ======================================================================================
    # ==================== RESTORE STATE ===================================================
    # ======================================================================================
    
    {% if part_cooling_fan >= 0 %}
      # Reset part cooling fan if it was changed
      M106 S{(backup_fan_speed * 255)|int}
    {% endif %}
    
    M220 S{(backup_feedrate * 100)|int}
  {% endif %}
  
  RESTORE_GCODE_STATE NAME=BLOBIFIER_state 


##########################################################################################
# Wipes the nozzle on a brush
#########################################################################################
[gcode_macro BLOBIFIER_CLEAN]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set pos_max = printer.toolhead.axis_maximum %}
  {% set position_y = pos_max.y - bl.skew_correction %}
  {% set original_accel = printer.toolhead.max_accel %}
  {% set original_minimum_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}
  {% set pos = printer.gcode_move.gcode_position %}
  
  SAVE_GCODE_STATE NAME=BLOBIFIER_CLEAN_state

  G90
  
  {% if bl.brush_accel > 0 %}
    SET_VELOCITY_LIMIT ACCEL={bl.brush_accel} MINIMUM_CRUISE_RATIO=0.1
  {% endif %}

  #{% if pos.z < bl.brush_top + bl.clearance_z %}
  #  G1 Z{bl.brush_top + bl.clearance_z} F{bl.travel_spd_z}
  #{% endif %}
  G1 X{bl.brush_start} F{bl.travel_spd_xy}
  G1 Y{position_y}
  #G1 Z{bl.brush_top + bl.clearance_z} F{bl.travel_spd_z}

  # Move nozzle down into brush.
  #G1 Z{bl.brush_top} F{bl.travel_spd_z}

  SET_VELOCITY_LIMIT ACCEL={original_accel} MINIMUM_CRUISE_RATIO={original_minimum_cruise_ratio}
  
  # Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
  {% for wipes in range(1, (bl.wipe_qty + 1)) %}
     G1 X{bl.brush_start + bl.brush_width} F{bl.wipe_spd_xy}
     G1 X{bl.brush_start} F{bl.wipe_spd_xy}
  {% endfor %}

  # Move away from the brush, but not onto the tray or in front of the filametrix cutter pin
  G1 X{[bl.brush_start - 20, 30]|max} F{bl.travel_spd_xy}

  RESTORE_GCODE_STATE NAME=BLOBIFIER_CLEAN_state



##########################################################################################
# Park the nozzle on the tray to prevent oozing during filament swaps. Place this 
# extension in the post_form_tip extension in mmu_macro_vars.cfg:
#   variable_user_post_form_tip_extension: "BLOBIFIER_PARK"
#
[gcode_macro BLOBIFIER_PARK]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}

  SAVE_GCODE_STATE NAME=BLOBIFIER_park_state
  
  {% if "xy" in printer.toolhead.homed_axes %} 
    G91
    M83
    
    {% set pos_now = printer.gcode_move.gcode_position %}
    G90
    {% if pos_now.x != bl.purge_x and pos_now.y != bl.purge_y %}
      {% if pos_now.x > bl.kick_ready_x %}
        G1 Y{bl.yield_y} F{bl.travel_spd_xy}
        G1 X{bl.kick_ready_x} F{bl.travel_spd_xy}
      {% endif %}
    {% endif %}
    G1 Y{bl.purge_y} F{bl.travel_spd_xy}
    BLOBIFIER_HOME
    G1 X{bl.purge_x} F{bl.travel_spd_xy}
  {% else %}
    {action_respond_info("BLOBIFIER: Printer XY Not Homed, Unable to park")}
  {% endif %}
					 
  RESTORE_GCODE_STATE NAME=BLOBIFIER_park_state



##########################################################################################
# Some sanity checks
#
[delayed_gcode BLOBIFIER_INIT]
initial_duration: 5.0
gcode:
  _BLOBIFIER_INIT


[gcode_macro _BLOBIFIER_INIT]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}

  # Valid part cooling fan setting
  {% if bl.part_cooling_fan != -1 and (bl.part_cooling_fan < 0 or bl.part_cooling_fan > 1) %}
    {action_emergency_stop("BLOBIFIER: Value %f is invalid for variable part_cooling_fan. Either -1 or a value from 0 .. 1 is valid." % (bl.part_cooling_fan))}
  {% endif %}

  # Check if position is on 'next'
  {% if printer.mmu %}
    {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].restore_xy_pos != 'next' %}
      {action_respond_info("BLOBIFIER: If not using a wipe tower, consider setting restore_xy_pos: 'next' in mmu_macro_vars.cfg")}
    {% endif %}
  {% endif %}

  # Check the z_raise variable for normal values
  {% if bl.z_raise < 3 %}
    {action_respond_info("BLOBIFIER: variable_z_raise: %f is very low. This is the value z raises in total on a single blob. Make sure the value is correct before continuing." % (bl.z_raise))}
  {% endif %}

  # Z raise exponent
  {% if bl.z_raise_exp > 1 or bl.z_raise_exp < 0.5 %}
    {action_respond_info("BLOBIFIER: variable_z_raise_exp has value: %f. This value is out of spec (0.5 ... 1.0)." % (bl.z_raise))}
  {% endif %}


[gcode_macro BLOBIFIER_MOVE]
gcode:
	{% set bl = printer['gcode_macro BLOBIFIER_HOME'] %}
	{% set move = params.MOVE|float %}
    {% set speed = params.SPEED|default(-99)|float %}
    {% set sync = params.SYNC|default(0)|int %}
	{% if bl.bl_homed == 1 %}
      {% if speed == -99 %}
		MANUAL_STEPPER STEPPER=blobifier MOVE={move} SYNC={sync}
      {% else %}
        MANUAL_STEPPER STEPPER=blobifier MOVE={move} SPEED={speed} SYNC={sync}
      {% endif %}
	{% else %}
		RESPOND MSG="BLOBIFIER: Not Homed, proceeding to home and reset position before moving"
		BLOBIFIER_HOME
        {% if speed == -99 %}
    		MANUAL_STEPPER STEPPER=blobifier MOVE={move} SYNC={sync}
        {% else %}
            MANUAL_STEPPER STEPPER=blobifier MOVE={move} SPEED={speed} SYNC={sync}
        {% endif %}
	{% endif %}

[gcode_macro BLOBIFIER_HOME]
variable_bl_homed: 0
gcode:
	MANUAL_STEPPER STEPPER=blobifier MOVE=-10 STOP_ON_ENDSTOP=1
	MANUAL_STEPPER STEPPER=blobifier SET_POSITION=0
	SET_GCODE_VARIABLE MACRO=BLOBIFIER_HOME VARIABLE=bl_homed VALUE=1
    {action_respond_info("BLOBIFIER: Position set to zero")}

[gcode_macro BLOBIFIER_RESET]
gcode:
	MANUAL_STEPPER STEPPER=blobifier SET_POSITION=0
	SET_GCODE_VARIABLE MACRO=BLOBIFIER_HOME VARIABLE=bl_homed VALUE=0
    {action_respond_info("BLOBIFIER: Reset")}